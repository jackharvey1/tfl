L.PolylineOffset={translatePoint:function(a,b,c){return L.point(a.x+b*Math.cos(c),a.y+b*Math.sin(c))},offsetPointLine:function(a,b){var c=a.length;if(c<2)throw new Error("Line should be defined by at least 2 points");for(var e,f,g,d=a[0],h=[],i=1;i<c;i++)e=a[i],g=Math.atan2(d.y-e.y,d.x-e.x),f=g-Math.PI/2,h.push({angle:g,offsetAngle:f,distance:b,original:[d,e],offset:[this.translatePoint(d,b,f),this.translatePoint(e,b,f)]}),d=e;return h},latLngsToPoints:function(a,b){for(var c=[],d=0,e=a.length;d<e;d++)c[d]=b.project(a[d]);return c},pointsToLatLngs:function(a,b){for(var c=[],d=0,e=a.length;d<e;d++)c[d]=b.unproject(a[d]);return c},offsetLatLngs:function(a,b,c){var d=this.offsetLatLngsToPoints(a,b,c);return this.pointsToLatLngs(d,c)},offsetLatLngsToPoints:function(a,b,c){var d=this.latLngsToPoints(a,c);return this.offsetPoints(d,b)},offsetPoints:function(a,b){var c=this.offsetPointLine(a,b);return this.joinLineSegments(c,b,"round")},intersection:function(a,b,c,d){var e=this.lineEquation(a,b),f=this.lineEquation(c,d);if(null==e||null==f)return null;if(e.hasOwnProperty("x"))return f.hasOwnProperty("x")?null:L.point(e.x,f.a*e.x+f.b);if(f.hasOwnProperty("x"))return L.point(f.x,e.a*f.x+e.b);if(e.a==f.a)return null;var g=(f.b-e.b)/(e.a-f.a),h=e.a*g+e.b;return L.point(g,h)},lineEquation:function(a,b){if(a.x!=b.x){var c=(b.y-a.y)/(b.x-a.x);return{a:c,b:a.y-c*a.x}}return a.y!=b.y?{x:a.x}:null},joinSegments:function(a,b,c,d){var e=[];switch(d){case"round":e=this.circularArc(a,b,c);break;case"cut":e=[this.intersection(a.offset[0],a.offset[1],b.original[0],b.original[1]),this.intersection(a.original[0],a.original[1],b.offset[0],b.offset[1])];break;case"straight":e=[a.offset[1],b.offset[0]];break;case"intersection":default:e=[this.intersection(a.offset[0],a.offset[1],b.offset[0],b.offset[1])]}return e.filter(function(a){return a})},joinLineSegments:function(a,b,c){var d=a.length,e=[],f=a[0],g=a[0];e.push(f.offset[0]);for(var h=1;h<d;h++)g=a[h],e=e.concat(this.joinSegments(f,g,b,c)),f=g;return e.push(g.offset[1]),e},circularArc:function(a,b,c){if(a.angle==b.angle)return[a.offset[1]];var d=a.original[1],e=[];if(c<0)var f=a.offsetAngle,g=b.offsetAngle;else var f=b.offsetAngle,g=a.offsetAngle;if(g<f&&(g+=2*Math.PI),g>f+Math.PI)return[this.intersection(a.offset[0],a.offset[1],b.offset[0],b.offset[1])];for(var h=Math.abs(8/c),i=f;i<g;i+=h)e.push(this.translatePoint(d,c,i));return e.push(this.translatePoint(d,c,g)),c>0&&e.reverse(),e}},"0"==L.version.charAt(0)&&parseInt(L.version.charAt(2))<8?L.Polyline.include({projectLatlngs:function(){this._originalPoints=[];for(var a=0,b=this._latlngs.length;a<b;a++)this._originalPoints[a]=this._map.latLngToLayerPoint(this._latlngs[a]);this.options.offset&&(this._originalPoints=L.PolylineOffset.offsetPoints(this._originalPoints,this.options.offset))}}):L.Polyline.include({_projectLatlngs:function(a,b,c){var f,g,d=a[0]instanceof L.LatLng,e=a.length;if(d){for(g=[],f=0;f<e;f++)g[f]=this._map.latLngToLayerPoint(a[f]),void 0!==c&&c.extend(g[f]);this.options.offset&&(g=L.PolylineOffset.offsetPoints(g,this.options.offset)),b.push(g)}else for(f=0;f<e;f++)void 0!==c?this._projectLatlngs(a[f],b,c):this._projectLatlngs(a[f],b)}}),L.Polyline.include({setOffset:function(a){return this.options.offset=a,this.redraw(),this}});
